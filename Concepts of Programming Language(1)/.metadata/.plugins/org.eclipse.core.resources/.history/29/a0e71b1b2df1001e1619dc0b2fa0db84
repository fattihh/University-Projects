package github_repo_analyzer;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.*;
import java.util.stream.Stream;
import java.io.BufferedReader;
import java.io.FileReader;


public class GithubRepoAnalyzer {
    private String repoUrl;
    private String cloneDirectoryPath;
  

    public GithubRepoAnalyzer(String repoUrl, String cloneDirectoryPath) {
        this.repoUrl = repoUrl;
        this.cloneDirectoryPath = cloneDirectoryPath;
    }

    public void cloneRepository() {
        try {
            System.out.println("Cloning repository... " + repoUrl);
            Git.cloneRepository()
              .setURI(repoUrl)
              .setDirectory(new File(cloneDirectoryPath))
              .call();
            System.out.println("Repository successfully cloned.");
        } catch (GitAPIException e) {
            e.printStackTrace();
        }
    }
    
    public List<Path> findClassPathsInJavaFiles(String cloneDirectoryPath) throws IOException {
        List<Path> classPaths = new ArrayList<>();

        Path startingPath = Paths.get(cloneDirectoryPath);
        try (Stream<Path> walkStream = Files.walk(startingPath)) {
            walkStream.filter(p -> p.toString().endsWith(".java"))
                      .forEach(filePath -> {
                          String fileContent = "";
                          try {
                              fileContent = Files.readString(filePath);
                          } catch (IOException e) {
                              e.printStackTrace();
                          }

                          Pattern classPattern = Pattern.compile("class\\s+([A-Z][A-Za-z0-9]*)");
                          Matcher matcher = classPattern.matcher(fileContent);

                          if (matcher.find()) {
                              classPaths.add(filePath);
                          }
                      });
        }

        return classPaths;
    }

    public void analyzeJavaFiles(List<Path> javaFiles) {
        for (Path javaFile : javaFiles) {
            try {
                int javadoc = countJavadocComments(javaFile.toString());
                int yorumsatiri = countSingleLineComments(javaFile.toString())+ commentBlocks(javaFile.toString());
                int codeLines = countCodeLines(javaFile.toString());
                int totalLines = countLoc(javaFile.toString());
                int functionCount = countFunctions(javaFile);
                
                System.out.println("Sınıf: " + javaFile.getFileName());
                System.out.println("Javadoc Satır Sayısı: " + javadoc);
                System.out.println("Yorum Satırı Sayısı: " + yorumsatiri);
                System.out.println("Kod Satır Sayısı: " + codeLines);
                System.out.println("LOC: " + totalLines);
                System.out.println("Fonksiyon sayısı: " + functionCount);
                // Fonksiyon sayısı ve Yorum Sapma Yüzdesi hesaplamaları burada yapılabilir
                
                System.out.println("------------------------------");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private int countJavadocComments(String filePath) throws IOException {
        Path path = Paths.get(filePath);

        if (!Files.exists(path) || !Files.isReadable(path)) {
            throw new IOException("Dosya bulunamadı veya okunamıyor: " + filePath);
        }

        int javadocLineCount = 0;
        boolean inJavadocComment = false;
        try (BufferedReader reader = Files.newBufferedReader(path)) {
            String line;

            while ((line = reader.readLine()) != null) {
                // String içindeki /** ve */ ifadelerini kontrol et
                String lineWithoutStrings = line.replaceAll("\".*?\"", "");

                if (!inJavadocComment && lineWithoutStrings.trim().startsWith("/**")) {
                    inJavadocComment = true;
                } else if (inJavadocComment && lineWithoutStrings.trim().endsWith("*/")) {
                    inJavadocComment = false;
                } else if (inJavadocComment) {
                    // JavaDoc yorumunun içindeki her satırı say
                    javadocLineCount++;
                }
            }
        }

        return javadocLineCount;
    }
         
    private int countSingleLineComments(String filePath) throws IOException {
        Path path = Paths.get(filePath);
        
        // Dosya yolunun geçerliliğini kontrol et
        if (!Files.exists(path)) {
            throw new IOException("Dosya bulunamadı: " + filePath);
        }
        
        // Dosyanın okunabilir olup olmadığını kontrol et
        if (!Files.isReadable(path)) {
            throw new IOException("Dosya okunabilir değil: " + filePath);
        }

        int yorumSatiriSayisi = 0;

        try (Stream<String> lines = Files.lines(path)) {
            yorumSatiriSayisi = lines
                    .mapToInt(satir -> {
                        int yorumIndexi = satir.indexOf("//");
                        if (yorumIndexi == -1) {
                            return 0;
                        }
                        String satirinOncekiKismi = satir.substring(0, yorumIndexi);
                        long ciftTirnakSayisi = satirinOncekiKismi.chars().filter(ch -> ch == '"').count();
                        // Çift tırnak içindeki `//` ifadesini dikkate alma
                        // Burada daha fazla kontrol eklenebilir, örneğin tek tırnak içindeki durumlar veya kaçış karakterleri
                        return (ciftTirnakSayisi % 2 == 0) ? 1 : 0;
                    })
                    .sum();
        }

        return yorumSatiriSayisi;
    }
    
    private int commentBlocks(String filePath) {
        Path path = Paths.get(filePath);
        // Dosya yolunun geçerliliğini ve okunabilirliğini kontrol et
        if (!Files.exists(path) || !Files.isReadable(path)) {
            System.err.println("Dosya bulunamadı veya okunamıyor: " + filePath);
            return 0;
        }

        StringBuilder contentBuilder = new StringBuilder();
        try (Stream<String> stream = Files.lines(path)) {
            stream.forEach(s -> contentBuilder.append(s).append("\n"));
        } catch (IOException e) {
            System.err.println("Dosya okunurken hata oluştu: " + e.getMessage());
            return 0;
        }

        String content = contentBuilder.toString();
        int totalCommentLines = 0;
        int start = content.indexOf("/*");

        while (start != -1) {
            if (content.length() > start + 2 && content.charAt(start + 2) == '*') {
                // Javadoc yorumunu atla
                start = content.indexOf("/*", start + 3);
                continue;
            }

            int end = content.indexOf("*/", start + 2);
            if (end == -1) {
                System.err.println("Yorum bloğu kapanışı bulunamadı.");
                break; // Kapanış yorumu bulunamazsa döngüyü kır
            }

            String commentBlock = content.substring(start + 2, end).trim();
            long lineCount = commentBlock.lines().count();
            totalCommentLines += lineCount;

            start = content.indexOf("/*", end + 2);
        }

        return totalCommentLines;
    } 
       
    private  int countFunctions(Path javaFilePath) throws IOException {
        String content = new String(Files.readAllBytes(javaFilePath));
        Pattern pattern = Pattern.compile(
            "(?s)(?<!\\w)(public|protected|private|static|final|synchronized|abstract)\\s+(<[^>]+>\\s+)?([\\w\\[\\]]+<.*?>[\\w\\[\\]]*\\s+)?[\\w\\[\\]]+\\s+\\w+\\s*\\(([^)]*?)\\)(?![\\w\\.]|\\{|\\->|;)",
            Pattern.DOTALL
        );

        Matcher matcher = pattern.matcher(content);

        int functionCount = 0;
        while (matcher.find()) {
            functionCount++;
        }

        return functionCount;
    }

    
    private int countCodeLines(String filePath) throws IOException {
        int codeLines = 0;
        boolean inComment = false;

        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        String line;

        while ((line = reader.readLine()) != null) {
            line = line.trim(); // Başındaki ve sonundaki boşlukları kaldır

            // Blok yorum veya Javadoc yorum başlangıcı
            if (line.startsWith("/*") || line.startsWith("/**")) {
                inComment = true;
            }
            // Blok yorum veya Javadoc yorum sonu
            if (line.endsWith("*/") && inComment) {
                inComment = false;
                continue;
            }
            // Yorum satırları veya boş satırlar hariç tutulur
            if (inComment || line.startsWith("//") || line.isEmpty()) {
                continue;
            }
            codeLines++; // Yukarıdaki koşullara uymayan satırlar kod satırıdır
        }

        reader.close();
        return codeLines;
    }
    
    private int countLoc(String filePath) throws IOException {
        int lines = 0;

        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        while (reader.readLine() != null) {
            lines++;
        }

        reader.close();
        return lines;
    }
         
    private double calculateCommentDeviationPercentage(int javadocCount, int otherComments, int codeLines, int functionCount) {
        if (functionCount == 0) return -100.0; // Fonksiyon yoksa, sapma -100 olarak kabul edilir.
        double expectedCommentLines = (javadocCount + otherComments) * 0.8;
        double actualCommentLinesPerFunction = (double) codeLines / functionCount * 0.3;
        return (100.0 * expectedCommentLines / actualCommentLinesPerFunction) - 100;
    }
        
    
}
