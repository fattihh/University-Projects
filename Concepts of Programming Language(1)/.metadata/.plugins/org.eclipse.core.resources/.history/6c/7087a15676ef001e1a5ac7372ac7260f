package github_repo_analyzer;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.*;
import java.util.stream.Stream;
import java.io.BufferedReader;
import java.io.FileReader;


public class GithubRepoAnalyzer {
    private String repoUrl;
    private String cloneDirectoryPath;
  

    public GithubRepoAnalyzer(String repoUrl, String cloneDirectoryPath) {
        this.repoUrl = repoUrl;
        this.cloneDirectoryPath = cloneDirectoryPath;
    }

    public void cloneRepository() {
        try {
            System.out.println("Cloning repository... " + repoUrl);
            Git.cloneRepository()
              .setURI(repoUrl)
              .setDirectory(new File(cloneDirectoryPath))
              .call();
            System.out.println("Repository successfully cloned.");
        } catch (GitAPIException e) {
            e.printStackTrace();
        }
    }
    
    public List<Path> findClassPathsInJavaFiles(String cloneDirectoryPath) throws IOException {
        List<Path> classPaths = new ArrayList<>();

        Path startingPath = Paths.get(cloneDirectoryPath);
        try (Stream<Path> walkStream = Files.walk(startingPath)) {
            walkStream.filter(p -> p.toString().endsWith(".java"))
                      .forEach(filePath -> {
                          String fileContent = "";
                          try {
                              fileContent = Files.readString(filePath);
                          } catch (IOException e) {
                              e.printStackTrace();
                          }

                          Pattern classPattern = Pattern.compile("class\\s+([A-Z][A-Za-z0-9]*)");
                          Matcher matcher = classPattern.matcher(fileContent);

                          if (matcher.find()) {
                              classPaths.add(filePath);
                          }
                      });
        }

        return classPaths;
    }

    public void analyzeJavaFiles(List<Path> javaFiles) {
        for (Path javaFile : javaFiles) {
            try {
                int javadoc = countJavadocComments(javaFile.toString());
                int yorumsatiri = countComments(javaFile.toString());
                int codeLines = countCodeLines(javaFile.toString());
                int totalLines = countLoc(javaFile.toString());
                int functionCount = countFunctions(javaFile);
                
                System.out.println("Sınıf: " + javaFile.getFileName());
                System.out.println("Javadoc Satır Sayısı: " + javadoc);
                System.out.println("Yorum Satırı Sayısı: " + yorumsatiri);
                System.out.println("Kod Satır Sayısı: " + codeLines);
                System.out.println("LOC: " + totalLines);
                System.out.println("Fonksiyon sayısı: " + functionCount);
                // Fonksiyon sayısı ve Yorum Sapma Yüzdesi hesaplamaları burada yapılabilir
                
                System.out.println("------------------------------");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private int countJavadocComments(String filePath) throws IOException {
    BufferedReader reader = new BufferedReader(new FileReader(filePath));
    String line;
    boolean inJavadocComment = false;
    int javadocLineCount = 0;

    while ((line = reader.readLine()) != null) {
        // Javadoc yorum bloğunun başlangıcını tespit et
        if (line.trim().startsWith("/**")) {
            inJavadocComment = true;
            continue; // Başlangıç satırını sayma
        }
        // Yorum bloğu içindeyken satırları say
        if (inJavadocComment && !line.trim().endsWith("*/")) {
            javadocLineCount++;
        }
        // Javadoc yorum bloğunun bitişini tespit et ve bu satırı da sayma
        if (line.trim().endsWith("*/")) {
            inJavadocComment = false;
            continue; // Bitiş satırını sayma
        }
    }

    reader.close();
    return javadocLineCount;
}
    
    
    private int countFunctions(Path javaFilePath) throws IOException {
        String content = new String(Files.readAllBytes(javaFilePath));
        // Aşağıdaki pattern, hem normal fonksiyonları hem de constructorları kapsayacak şekilde güncellenmiştir.
        // Constructorlar için dönüş tipi yerine sınıf adını kontrol etmek üzere düzenlendi.
        Pattern pattern = Pattern.compile(
            "\\b(public|protected|private|static|final|synchronized)\\s+(\\w+\\s+)?\\w+\\s*\\(.*?\\)\\s*\\{|" + // normal fonksiyonlar ve static bloklar
            "\\b(public|protected|private)\\s+\\w+\\s*\\(.*?\\)\\s*\\{"); // constructorlar
        Matcher matcher = pattern.matcher(content);

        int functionCount = 0;
        while (matcher.find()) {
            functionCount++;
        }

        return functionCount;
    }
    
    private int countCodeLines(String filePath) throws IOException {
        int codeLines = 0;
        boolean inComment = false;

        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        String line;

        while ((line = reader.readLine()) != null) {
            line = line.trim(); // Başındaki ve sonundaki boşlukları kaldır

            // Blok yorum veya Javadoc yorum başlangıcı
            if (line.startsWith("/*") || line.startsWith("/**")) {
                inComment = true;
            }
            // Blok yorum veya Javadoc yorum sonu
            if (line.endsWith("*/") && inComment) {
                inComment = false;
                continue;
            }
            // Yorum satırları veya boş satırlar hariç tutulur
            if (inComment || line.startsWith("//") || line.isEmpty()) {
                continue;
            }
            codeLines++; // Yukarıdaki koşullara uymayan satırlar kod satırıdır
        }

        reader.close();
        return codeLines;
    }
    
    private int countLoc(String filePath) throws IOException {
        int lines = 0;

        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        while (reader.readLine() != null) {
            lines++;
        }

        reader.close();
        return lines;
    }
    
    
    
    private double calculateCommentDeviationPercentage(int javadocCount, int otherComments, int codeLines, int functionCount) {
        if (functionCount == 0) return -100.0; // Fonksiyon yoksa, sapma -100 olarak kabul edilir.
        double expectedCommentLines = (javadocCount + otherComments) * 0.8;
        double actualCommentLinesPerFunction = (double) codeLines / functionCount * 0.3;
        return (100.0 * expectedCommentLines / actualCommentLinesPerFunction) - 100;
    }


}
