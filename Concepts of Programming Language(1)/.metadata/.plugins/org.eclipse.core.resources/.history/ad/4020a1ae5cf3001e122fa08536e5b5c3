package github_repo_analyzer;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;


public class github_repo_analyzer_example {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		
		 Scanner scanner = new Scanner(System.in);
	        
	        // Kullanıcıdan GitHub repository URL'si iste
	        System.out.println("Lütfen klonlamak istediğiniz GitHub reposunun URL'sini girin:");
	        String repoUrl = scanner.nextLine();
	        
	        // Çalışma dizinini temel alarak hedef yol belirle
	        String baseDir = System.getProperty("user.dir");
	        String uniqueDirName = "repo_" + System.currentTimeMillis(); // Benzersiz klasör ismi oluştur
	        String path = Paths.get(baseDir, uniqueDirName).toString();
	        
	        // Hedef klasörü temizle veya oluştur (bu durumda, yeni bir klasör oluşturulacak)
	        cleanOrCreateDirectory(path);
	        
	        // GithubRepoAnalyzer nesnesini oluştur
	        GithubRepoAnalyzer github = new GithubRepoAnalyzer(repoUrl, path);
	        
	        // Repository'i klonla
	        github.cloneRepository();
	        
	        // Java dosyalarını bul
	        List<Path> javaFiles = github.findClassPathsInJavaFiles(path);
	        
	        // Java dosyalarını analiz et
	        github.analyzeJavaFiles(javaFiles);
	        
	        scanner.close();
	    }
	    
	    public static void cleanOrCreateDirectory(String directoryPath) throws IOException {
	        Path path = Paths.get(directoryPath);
	        if (Files.exists(path)) {
	            Files.walk(path)
	                .sorted(Comparator.reverseOrder())
	                .map(Path::toFile)
	                .forEach(File::delete);
	        }
	        Files.createDirectories(path); // Klasörü yeniden oluştur veya oluşturulmamışsa oluştur
	    }
		
		
		
		
		
              
	}

}
